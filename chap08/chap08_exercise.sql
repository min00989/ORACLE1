--8장
--8-1- 카티션 곱
SELECT *
   FROM EMP;

SELECT *
   FROM DEPT;
   
SELECT 14*4  --56
   FROM DUAS;
   
SELECT *
   FROM EMP, DEPT
ORDER BY EMPNO;

--8-2 동등조인
SELECT *
   FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO
ORDER BY EMPNO;

--8-3
SELECT E.EMPNO, E.ENAME, D.DNAME
   FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
ORDER BY EMPNO;

SELECT J.JOB_ID, J.JOB_TITLE,
              H.START_DATE, H.END_DATE
   FROM JOBS J, JOB_HISTORY H
WHERE J.JOB_ID = H.JOB_ID(+);

SELECT J.JOB_ID, J.JOB_TITLE,
              H.START_DATE, H.END_DATE
   FROM JOBS J, 
               (SELECT JOB_ID,
                               MIN(START_DATE) START_DATE,
                               MAX(END_DATE) END_DATE
                FROM JOB_HISTORY
                GROUP BY JOB_ID) H
WHERE J.JOB_ID = H.JOB_ID(+);

SELECT COUNT(*)
   FROM JOBS;
   
SELECT *
   FROM EMPLOYEES;
   
SELECT E.EMPLOYEE_ID, E.LAST_NAME,
               D.DEPARTMENT_NAME
   FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID(+);

SELECT *
   FROM LOCATIONS L, COUNTRIES C
WHERE L.COUNTRY_ID = C.COUNTRY_ID; --동등 조인
   
SELECT *
   FROM COUNTRIES;
   
   
--8-4 두 테이블에서 국가코드가 똑같은 이름
-- 주의 : 열의 정의가 애매합니다. -> 테이블 지정. 컬럼명
SELECT  L.LOCATION_ID,
                C.COUNTRY_ID, C.COUNTRY_NAME
   FROM LOCATIONS L, COUNTRIES C
WHERE L.COUNTRY_ID = C.COUNTRY_ID;

--8-5
SELECT E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME, D.LOC
   FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
ORDER BY D.DEPTNO, E.EMPNO;

--8-6 급여가 3000이상인 직원정보와 부서정보
SELECT E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME, D.LOC
   FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
     AND E.SAL >= 3000;
     
--1분 복습 EMP, DEPT 조인했을 때
-- 급여가 2500 이하이고 사원 번호가 9999 이하인 정보가 출력
SELECT E.EMPNO, E.ENAME, E.SAL, E.DEPTNO,
               D.DNAME, D.LOC
  FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
     AND E.SAL <= 2500
     AND E.EMPNO <= 9999
ORDER BY E.EMPNO;

--비등가 조인 : 등가조인 이외 방식
--8-7 급여 범위를 지정하는 조건식으로 조인
SELECT *
   FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

SELECT *
   FROM EMPLOYEES E, JOBS J
WHERE E.SALARY BETWEEN J.MIN_SALARY AND J.MAX_SALARY;

SELECT *
   FROM EMPLOYEES E, JOB_HISTORY H
WHERE E.HIRE_DATE BETWEEN H.START_DATE AND H.END_DATE;

--자체조인
SELECT *
FROM EMP E;

SELECT E.EMPNO, E.ENAME 사원명,M.ENAME 관리자명
   FROM EMP E, EMP M
WHERE E.MGR = M.EMPNO;

SELECT E.EMPLOYEE_ID, E.FIRST_NAME || ' ' || E.LAST_NAME 사원명,
               M.MANAGER_ID, M.FIRST_NAME || ' ' || M.LAST_NAME 관리자명
  FROM EMPLOYEES E, EMPLOYEES M
WHERE E.MANAGER_ID = M.EMPLOYEE_ID;

--8-9 14명 외부조인 직원 정보 위주 모두
SELECT E.EMPNO, E.ENAME 사원명,M.ENAME 관리자명
   FROM EMP E, EMP M
WHERE E.MGR = M.EMPNO(+); -- LEFT OUTER JOIN

--8-10
SELECT E.EMPNO, E.ENAME 사원명,M.ENAME 관리자명
   FROM EMP E, EMP M
WHERE E.MGR(+) = M.EMPNO; -- RIGHT OUTER JOIN

--문제1
SELECT C.COUNTRY_NAME, L.STATE_PROVINCE, L.STREET_ADDRESS
   FROM COUNTRIES C, LOCATIONS L
WHERE C.COUNTRY_ID = L.COUNTRY_ID;

--문제2
SELECT J.JOB_ID, J.JOB_TITLE,
               H.START_DATE, H.END_DATE
   FROM JOBS J, JOB_HISTORY H
WHERE J.JOB_ID = H.JOB_ID;

--문제3
SELECT E.FIRST_NAME, E.LAST_NAME,
               D.DEPARTMENT_NAME,
               J.JOB_TITLE
   FROM EMPLOYEES E, DEPARTMENTS D, JOBS J
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
      AND E.JOB_ID = J.JOB_ID;
      
--문제4
SELECT C.COUNTRY_ID, C.COUNTRY_NAME,
               L.CITY
   FROM COUNTRIES C, LOCATIONS L
WHERE C.COUNTRY_ID = L.COUNTRY_ID(+);

--문제5
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME,
               D.DEPARTMENT_NAME
  FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID(+)
ORDER BY E.EMPLOYEE_ID;

--문제6
SELECT E.EMPLOYEE_ID, E.FIRST_NAME || ' ' || E.LAST_NAME 직원명,
               M.FIRST_NAME || ' ' || M.LAST_NAME 관리자명
   FROM EMPLOYEES E, EMPLOYEES M
WHERE E.MANAGER_ID = M.EMPLOYEE_ID
ORDER BY E.EMPLOYEE_ID;


--SQL-99
-- NATURAL JOIN : 등가 조인 대신
--8-11
SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE,
               E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
   FROM EMP E NATURAL JOIN DEPT D
 ORDER  BY DEPTNO, E.EMPNO;
 
-- JOIN~~USING
--8-12
SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE,
               E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
   FROM EMP E JOIN DEPT D USING (DEPTNO)
WHERE SAL >= 3000
 ORDER BY DEPTNO, E.EMPNO;
 
 --JOIN~ON
 --8-13
SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, 
               E.DEPTNO, 
               D.DNAME, D.LOC
  FROM EMP E JOIN DEPT D ON (E.DEPTNO = D.DEPTNO)
WHERE SAL <= 3000
 ORDER BY E.DEPTNO, E.EMPNO;
 
 --OUTER JOIN 외부조인
 --8-14 (14건)
 SELECT E1.EMPNO, E1.ENAME, E1.MGR,
                E2.EMPNO AS MGR_EMPNO,
                E2.ENAME AS MGR_ENAME
   FROM EMP E1 LEFT OUTER JOIN EMP E2 ON (E1.MGR = E2.EMPNO)
     JOIN DEPT E3 ON (E1.DEPTNO = E3.DEPTNO)
 ORDER BY E1.EMPNO;
 
 --8-15(21건)
 SELECT E1.EMPNO, E1.ENAME, E1.MGR,
                E2.EMPNO AS MGR_EMPNO,
                E2.ENAME AS MGR_ENAME
   FROM EMP E1 RIGHT OUTER JOIN EMP E2 ON (E1.MGR = E2.EMPNO)
 ORDER BY E1.EMPNO;
 
 --8-16(22건)
 SELECT E1.EMPNO, E1.ENAME, E1.MGR,
                E2.EMPNO AS MGR_EMPNO,
                E2.ENAME AS MGR_ENAME
   FROM EMP E1 FULL OUTER JOIN EMP E2 ON (E1.MGR = E2.EMPNO)
 ORDER BY E1.EMPNO;
 
 --1분 복습 JOIN USING
 --EMP, DEPT 조인 SQL99 DEPTNO
 --급여는 3000이상이며, 직속상관이 반드시 있어야 함.
 SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM,
                 DEPTNO, D.DNAME, D.LOC
   FROM EMP E JOIN DEPT D USING (DEPTNO)
WHERE E.SAL >= 3000
      AND E.MGR IS NOT NULL
 ORDER BY DEPTNO, E.EMPNO;
 
 --문제1
 SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.SAL
   FROM DEPT D, EMP E
WHERE D.DEPTNO = E.DEPTNO 
     AND E.SAL > 2000;
     
SELECT DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.SAL
   FROM DEPT D JOIN EMP E USING (DEPTNO)
WHERE SAL > 2000;

--문제2
SELECT D.DEPTNO, D.DNAME,
               TRUNC(AVG(SAL)) AS AVG_SAL,
               MAX(SAL) AS MAX_SAL,
               MIN(SAL) AS MIN_SAL,
               COUNT(*) AS CNT
   FROM DEPT D, EMP E
WHERE D.DEPTNO = E.DEPTNO
GROUP BY D.DEPTNO, D.DNAME;

SELECT DEPTNO, D.DNAME,
               TRUNC(AVG(SAL)) AS AVG_SAL,
               MAX(SAL) AS MAX_SAL,
               MIN(SAL) AS MIN_SAL,
               COUNT(*) AS CNT
   FROM DEPT D NATURAL JOIN EMP E
GROUP BY DEPTNO, D.DNAME;

--문제3
SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.JOB, E.SAL
   FROM DEPT D, EMP E
WHERE D.DEPTNO = E.DEPTNO(+);

SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.JOB, E.SAL
   FROM DEPT D LEFT OUTER JOIN EMP E ON (D.DEPTNO = E.DEPTNO);
   
--문제4
SELECT D.DEPTNO, D.DNAME,
               E.EMPNO, E.ENAME, E.MGR, E.SAL, E.DEPTNO AS DEPTNO_1, 
               S.LOSAL, S.HISAL, S.GRADE,
               M.EMPNO AS MGR_EMPNO,
               M.ENAME AS MGR_ENAME
   FROM DEPT D, EMP E, SALGRADE S, EMP M
WHERE D.DEPTNO = E.DEPTNO(+)
     AND E.SAL BETWEEN S.LOSAL(+) AND S.HISAL(+) 
     AND E.MGR = M.EMPNO(+)
ORDER BY D.DEPTNO, E.EMPNO;

SELECT D.DEPTNO, D.DNAME,
               E.EMPNO, E.ENAME, E.MGR, E.SAL, E.DEPTNO AS DEPTNO_1, 
               S.LOSAL, S.HISAL, S.GRADE,
               M.EMPNO AS MGR_EMPNO,
               M.ENAME AS MGR_ENAME
   FROM DEPT D LEFT OUTER JOIN EMP E ON(D.DEPTNO = E.DEPTNO)
     LEFT OUTER JOIN SALGRADE S ON ( E.SAL BETWEEN S.LOSAL AND S.HISAL)
    LEFT OUTER JOIN EMP M ON (E.MGR = M.EMPNO)
ORDER BY D.DEPTNO, E.EMPNO;

